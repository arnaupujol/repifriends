% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbscan.R
\name{dbscan}
\alias{dbscan}
\title{This method finds the DBSCAN clusters from a set of positions and returns their cluster IDs.}
\usage{
dbscan(
  positions,
  link_d,
  min_neighbours = 2,
  test = NULL,
  keep_null_tests = FALSE,
  in_latlon = FALSE,
  to_epsg = NULL,
  verbose = FALSE
)
}
\arguments{
\item{positions}{data.frame with the positions of parameters we want to query with shape (n,2) where n is the number of positions.}

\item{link_d:}{The linking distance to connect cases. Should be in the same scale as the positions.}

\item{min_neighbours:}{Minium number of neighbours in the radius < link_d needed to link cases as friends.}

\item{keep_null_tests:}{Whether to remove or not missings. If numeric, provide value to impute.}

\item{in_latlon:}{If True, x and y coordinates are treated as longitude and latitude respectively, otherwise they are treated as cartesian coordinates.}

\item{to_epsg:}{If in_latlon is True, x and y are reprojected to this EPSG.}

\item{verbose:}{If TRUE, print information of the process; else, do not print.}
}
\value{
cluster_id: Vector of the cluster IDs of each position, with 0 for those without a cluster. Returns empty numeric vector if positions vector is empty.
}
\description{
This method finds the DBSCAN clusters from a set of positions and returns their cluster IDs.
}
\details{
The epifriends package uses the RANN package which gives us the exact nearest neighbours using the friends of friends algorithm. For more information on the RANN library please visit https://cran.r-project.org/web/packages/RANN/RANN.pdf
}
\examples{
# Required packages
if(!require("RANN")) install.packages("RANN")
library("RANN")

# Creation of x vector of longitude coordinates, y vector of latitude coordinates and finaly merge them on a position data frame.
x <- c(1,2,3,4,7.5,8,8.5,9,10,13,13.1,13.2,13.3,14,15,30)
y <- c(1,2,3,4,7.5,8,8.5,9,10,13,13.1,13.2,13.3,14,15,30)
pos <- data.frame(x,y)

# Computation of clusters of hotspots for positions with dbscan algorithm using linking distance 2 and minimum 3 neighbours.
db <- dbscan(pos, 2 ,3)

}
\author{
Mikel Majewski Etxeberria based on earlier python code by Arnau Pujol.
}
